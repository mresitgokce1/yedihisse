// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using yedihisse.DataAccess.Concrete.EntityFramework.Contexts;

namespace yedihisse.DataAccess.Migrations
{
    [DbContext(typeof(YediHisseContext))]
    partial class YediHisseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("yedihisse.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AddressId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressDetail")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AddressDirection")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ApartmentBlokName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ApartmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ApartmentNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FlatNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FloorNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Parish")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Address.Address");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Address.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Allotment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AllotmentId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PrePay")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 4)
                        .HasColumnType("numeric(4,4)")
                        .HasDefaultValue(0m);

                    b.Property<string>("PrePayReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("PrePayStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 4)
                        .HasColumnType("numeric(4,4)")
                        .HasDefaultValue(0m);

                    b.Property<string>("PriceReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("PriceStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("ShippingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ShippingId");

                    b.ToTable("Allotment.Allotment");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AnimalId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Age")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2, 2)
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<int>("AnimalTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("BaitCode")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 4)
                        .HasColumnType("numeric(4,4)")
                        .HasDefaultValue(0m);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EarCode")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("Gain")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 4)
                        .HasColumnType("numeric(4,4)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float>("Kilo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 4)
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Animal.Animal");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AnimalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CanAllotment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Animal.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ApplicationId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllotmentId")
                        .HasColumnType("integer");

                    b.Property<byte>("AllotmentRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("AnimalTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AllotmentId");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Application.Application");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StatusId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicationStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationStatusTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Application.Status");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ApplicationStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StatusTypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Application.StatusType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("BranchId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FirmId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FirmId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("Branch.Branch");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.BranchManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Branch.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CarId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CarNumberPlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<int>("ShippingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("ShippingId")
                        .IsUnique();

                    b.ToTable("Car.Car");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Car.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CompanyId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("Company.Company");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.CompanyManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Company.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Firm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("FirmId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirmName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("Firm.Firm");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.FirmManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("FirmId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FirmId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Firm.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PhoneNumberId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("PhoneNumberTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PhoneNumberTypeId")
                        .IsUnique();

                    b.ToTable("PhoneNumber.PhoneNumber");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("PhoneNumber.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ShippingId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Shipping.Shipping");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ShippingManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ShippingId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ShippingId");

                    b.HasIndex("UserId");

                    b.ToTable("Shipping.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Slaughterhouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SlaughterhouseId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<string>("SlaughterhouseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("Slaughterhouse.Slaughterhouse");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseJoinAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("JoinAnimalId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("KillingComplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("KillingNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("KillingPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SlaughterhouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("KillingNumber")
                        .IsUnique();

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("SlaughterhouseId");

                    b.ToTable("Slaughterhouse.JoinAnimal");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseJoinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("JoinTypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HoldingCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("KillingCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ShreddingCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("SlaughterhouseId")
                        .HasColumnType("integer");

                    b.Property<int>("SlaughterhouseTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("SlaughterhouseId");

                    b.HasIndex("SlaughterhouseTypeId");

                    b.ToTable("Slaughterhouse.JoinType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SlaughterhouseId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("SlaughterhouseId");

                    b.HasIndex("UserId");

                    b.ToTable("Slaughterhouse.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Slaughterhouse.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SupplierId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SupplierTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("SupplierTypeId")
                        .IsUnique();

                    b.ToTable("Supplier.Supplier");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SupplierManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Supplier.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SupplierType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Supplier.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BYTEA");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("UserPhoneNumber")
                        .IsUnique();

                    b.ToTable("User.User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.UserJoinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("JoinTypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User.JoinType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("User.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Address", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.AddressType", "AddressType")
                        .WithOne("Address")
                        .HasForeignKey("yedihisse.Entities.Concrete.Address", "AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("AddressCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("AddressModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AddressType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("AddressTypeCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("AddressTypeModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Allotment", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Animal", "Animal")
                        .WithOne("Allotment")
                        .HasForeignKey("yedihisse.Entities.Concrete.Allotment", "AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("AllotmentCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("AllotmentModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Shipping", "Shipping")
                        .WithMany("Allotments")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Animal", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.AnimalType", "AnimalType")
                        .WithMany("Animals")
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("AnimalCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("AnimalModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimalType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AnimalType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("AnimalTypeCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("AnimalTypeModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Application", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Allotment", "Allotment")
                        .WithMany("Applications")
                        .HasForeignKey("AllotmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.AnimalType", "AnimalType")
                        .WithMany("Applications")
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Branch", "Branch")
                        .WithMany("Applications")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("ApplicationCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("ApplicationModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allotment");

                    b.Navigation("AnimalType");

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ApplicationStatus", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Application", "Application")
                        .WithMany("ApplicationStatuses")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.ApplicationStatusType", "ApplicationStatusType")
                        .WithMany("ApplicationStatuses")
                        .HasForeignKey("ApplicationStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("ApplicationStatusCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("ApplicationStatusModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ApplicationStatusType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ApplicationStatusType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("ApplicationStatusTypeCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("ApplicationStatusTypeModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Branch", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("Branch")
                        .HasForeignKey("yedihisse.Entities.Concrete.Branch", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("BranchCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Firm", "Firm")
                        .WithMany("Branches")
                        .HasForeignKey("FirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("BranchModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Branches")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Firm");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.BranchManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Branch", "Branch")
                        .WithMany("BranchManagers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("BranchManagerCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("BranchManagerModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("BranchManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Car", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.CarType", "CarType")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("CarCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("CarModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Cars")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Shipping", "Shipping")
                        .WithOne("Car")
                        .HasForeignKey("yedihisse.Entities.Concrete.Car", "ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PhoneNumber");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.CarType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("CarTypeCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("CarTypeModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Company", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("Company")
                        .HasForeignKey("yedihisse.Entities.Concrete.Company", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("CompanyCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("CompanyModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Companies")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.CompanyManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Company", "Company")
                        .WithMany("CompanyManagers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("CompanyManagerCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("CompanyManagerModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("CompanyManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Firm", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("Firm")
                        .HasForeignKey("yedihisse.Entities.Concrete.Firm", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Company", "Company")
                        .WithMany("Firms")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("FirmCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("FirmModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Firms")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.FirmManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("FirmManagerCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Firm", "Firm")
                        .WithMany("FirmManagers")
                        .HasForeignKey("FirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("FirmManagerModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("FirmManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Firm");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumber", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("PhoneNumberCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("PhoneNumberModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumberType", "PhoneNumberType")
                        .WithOne("PhoneNumber")
                        .HasForeignKey("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PhoneNumberType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumberType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("PhoneNumberTypeCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("PhoneNumberTypeModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Shipping", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("ShippingCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("ShippingModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ShippingManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("ShippingManagerCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("ShippingManagerModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Shipping", "Shipping")
                        .WithMany("ShippingManagers")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("ShippingManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Shipping");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Slaughterhouse", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("Slaughterhouse")
                        .HasForeignKey("yedihisse.Entities.Concrete.Slaughterhouse", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("SlaughterhouseCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("SlaughterhouseModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Slaughterhouses")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseJoinAnimal", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Animal", "Animal")
                        .WithOne("SlaughterhouseJoinAnimal")
                        .HasForeignKey("yedihisse.Entities.Concrete.SlaughterhouseJoinAnimal", "AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("SlaughterhouseJoinAnimalCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("SlaughterhouseJoinAnimalModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Slaughterhouse", "Slaughterhouse")
                        .WithMany("SlaughterhouseJoinAnimals")
                        .HasForeignKey("SlaughterhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Slaughterhouse");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseJoinType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("SlaughterhouseJoinTypeCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("SlaughterhouseJoinTypeModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Slaughterhouse", "Slaughterhouse")
                        .WithMany("SlaughterhouseJoinTypes")
                        .HasForeignKey("SlaughterhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.SlaughterhouseType", "SlaughterhouseType")
                        .WithMany("SlaughterhouseJoinTypes")
                        .HasForeignKey("SlaughterhouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Slaughterhouse");

                    b.Navigation("SlaughterhouseType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("SlaughterhouseManagerCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("SlaughterhouseManagerModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Slaughterhouse", "Slaughterhouse")
                        .WithMany("SlaughterhouseManagers")
                        .HasForeignKey("SlaughterhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("SlaughterhouseManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Slaughterhouse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("SlaughterhouseTypeCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("SlaughterhouseTypeModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Supplier", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("Supplier")
                        .HasForeignKey("yedihisse.Entities.Concrete.Supplier", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("SupplierCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("SupplierModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Suppliers")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.SupplierType", "SupplierType")
                        .WithOne("Supplier")
                        .HasForeignKey("yedihisse.Entities.Concrete.Supplier", "SupplierTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PhoneNumber");

                    b.Navigation("SupplierType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SupplierManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("SupplierManagerCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("SupplierManagerModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Supplier", "Supplier")
                        .WithMany("SupplierManagers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("SupplierManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SupplierType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("SupplierTypeCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("SupplierTypeModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.User", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("User")
                        .HasForeignKey("yedihisse.Entities.Concrete.User", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("UserCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("UserModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Users")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.UserJoinType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("UserJoinTypeCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("UserJoinTypeModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("UserJoinTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.UserType", "UserType")
                        .WithMany("UserJoinTypes")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("User");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.UserType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "CreatedByUser")
                        .WithMany("UserTypeCreatedByUserIds")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "ModifiedByUser")
                        .WithMany("UserTypeModifiedByUserIds")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Address", b =>
                {
                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Firm");

                    b.Navigation("Slaughterhouse");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AddressType", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Allotment", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Animal", b =>
                {
                    b.Navigation("Allotment");

                    b.Navigation("SlaughterhouseJoinAnimal");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AnimalType", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Applications");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Application", b =>
                {
                    b.Navigation("ApplicationStatuses");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ApplicationStatusType", b =>
                {
                    b.Navigation("ApplicationStatuses");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Branch", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("BranchManagers");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.CarType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Company", b =>
                {
                    b.Navigation("CompanyManagers");

                    b.Navigation("Firms");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Firm", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("FirmManagers");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumber", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Cars");

                    b.Navigation("Companies");

                    b.Navigation("Firms");

                    b.Navigation("Slaughterhouses");

                    b.Navigation("Suppliers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumberType", b =>
                {
                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Shipping", b =>
                {
                    b.Navigation("Allotments");

                    b.Navigation("Car");

                    b.Navigation("ShippingManagers");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Slaughterhouse", b =>
                {
                    b.Navigation("SlaughterhouseJoinAnimals");

                    b.Navigation("SlaughterhouseJoinTypes");

                    b.Navigation("SlaughterhouseManagers");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseType", b =>
                {
                    b.Navigation("SlaughterhouseJoinTypes");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Supplier", b =>
                {
                    b.Navigation("SupplierManagers");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SupplierType", b =>
                {
                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.User", b =>
                {
                    b.Navigation("AddressCreatedByUserIds");

                    b.Navigation("AddressModifiedByUserIds");

                    b.Navigation("AddressTypeCreatedByUserIds");

                    b.Navigation("AddressTypeModifiedByUserIds");

                    b.Navigation("AllotmentCreatedByUserIds");

                    b.Navigation("AllotmentModifiedByUserIds");

                    b.Navigation("AnimalCreatedByUserIds");

                    b.Navigation("AnimalModifiedByUserIds");

                    b.Navigation("AnimalTypeCreatedByUserIds");

                    b.Navigation("AnimalTypeModifiedByUserIds");

                    b.Navigation("ApplicationCreatedByUserIds");

                    b.Navigation("ApplicationModifiedByUserIds");

                    b.Navigation("Applications");

                    b.Navigation("ApplicationStatusCreatedByUserIds");

                    b.Navigation("ApplicationStatusModifiedByUserIds");

                    b.Navigation("ApplicationStatusTypeCreatedByUserIds");

                    b.Navigation("ApplicationStatusTypeModifiedByUserIds");

                    b.Navigation("BranchCreatedByUserIds");

                    b.Navigation("BranchManagerCreatedByUserIds");

                    b.Navigation("BranchManagerModifiedByUserIds");

                    b.Navigation("BranchManagers");

                    b.Navigation("BranchModifiedByUserIds");

                    b.Navigation("CarCreatedByUserIds");

                    b.Navigation("CarModifiedByUserIds");

                    b.Navigation("CarTypeCreatedByUserIds");

                    b.Navigation("CarTypeModifiedByUserIds");

                    b.Navigation("CompanyCreatedByUserIds");

                    b.Navigation("CompanyManagerCreatedByUserIds");

                    b.Navigation("CompanyManagerModifiedByUserIds");

                    b.Navigation("CompanyManagers");

                    b.Navigation("CompanyModifiedByUserIds");

                    b.Navigation("FirmCreatedByUserIds");

                    b.Navigation("FirmManagerCreatedByUserIds");

                    b.Navigation("FirmManagerModifiedByUserIds");

                    b.Navigation("FirmManagers");

                    b.Navigation("FirmModifiedByUserIds");

                    b.Navigation("PhoneNumberCreatedByUserIds");

                    b.Navigation("PhoneNumberModifiedByUserIds");

                    b.Navigation("PhoneNumberTypeCreatedByUserIds");

                    b.Navigation("PhoneNumberTypeModifiedByUserIds");

                    b.Navigation("ShippingCreatedByUserIds");

                    b.Navigation("ShippingManagerCreatedByUserIds");

                    b.Navigation("ShippingManagerModifiedByUserIds");

                    b.Navigation("ShippingManagers");

                    b.Navigation("ShippingModifiedByUserIds");

                    b.Navigation("SlaughterhouseCreatedByUserIds");

                    b.Navigation("SlaughterhouseJoinAnimalCreatedByUserIds");

                    b.Navigation("SlaughterhouseJoinAnimalModifiedByUserIds");

                    b.Navigation("SlaughterhouseJoinTypeCreatedByUserIds");

                    b.Navigation("SlaughterhouseJoinTypeModifiedByUserIds");

                    b.Navigation("SlaughterhouseManagerCreatedByUserIds");

                    b.Navigation("SlaughterhouseManagerModifiedByUserIds");

                    b.Navigation("SlaughterhouseManagers");

                    b.Navigation("SlaughterhouseModifiedByUserIds");

                    b.Navigation("SlaughterhouseTypeCreatedByUserIds");

                    b.Navigation("SlaughterhouseTypeModifiedByUserIds");

                    b.Navigation("SupplierCreatedByUserIds");

                    b.Navigation("SupplierManagerCreatedByUserIds");

                    b.Navigation("SupplierManagerModifiedByUserIds");

                    b.Navigation("SupplierManagers");

                    b.Navigation("SupplierModifiedByUserIds");

                    b.Navigation("SupplierTypeCreatedByUserIds");

                    b.Navigation("SupplierTypeModifiedByUserIds");

                    b.Navigation("UserCreatedByUserIds");

                    b.Navigation("UserJoinTypeCreatedByUserIds");

                    b.Navigation("UserJoinTypeModifiedByUserIds");

                    b.Navigation("UserJoinTypes");

                    b.Navigation("UserModifiedByUserIds");

                    b.Navigation("UserTypeCreatedByUserIds");

                    b.Navigation("UserTypeModifiedByUserIds");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.UserType", b =>
                {
                    b.Navigation("UserJoinTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
