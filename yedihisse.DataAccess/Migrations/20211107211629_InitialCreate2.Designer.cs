// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using yedihisse.DataAccess.Concrete.EntityFramework.Contexts;

namespace yedihisse.DataAccess.Migrations
{
    [DbContext(typeof(YediHisseContext))]
    [Migration("20211107211629_InitialCreate2")]
    partial class InitialCreate2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("yedihisse.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AddressId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressDetail")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AddressDirection")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ApartmentBlokName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ApartmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ApartmentNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FlatNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FloorNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Parish")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId")
                        .IsUnique();

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Address.Address");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Address.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Allotment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AllotmentId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PrePay")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 4)
                        .HasColumnType("numeric(4,4)")
                        .HasDefaultValue(0m);

                    b.Property<string>("PrePayReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("PrePayStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 4)
                        .HasColumnType("numeric(4,4)")
                        .HasDefaultValue(0m);

                    b.Property<string>("PriceReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("PriceStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("ShippingId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.HasIndex("ShippingId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Allotment.Allotment");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AnimalId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Age")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2, 2)
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<int>("AnimalTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("BaitCode")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 4)
                        .HasColumnType("numeric(4,4)")
                        .HasDefaultValue(0m);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EarCode")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("Gain")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 4)
                        .HasColumnType("numeric(4,4)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<float>("Kilo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 4)
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Animal.Animal");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AnimalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CanAllotment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Animal.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ApplicationId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AllotmentId")
                        .HasColumnType("integer");

                    b.Property<byte>("AllotmentRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("AnimalTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AllotmentId");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Application.Application");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StatusId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicationStatusTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationStatusTypeId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Application.Status");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ApplicationStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StatusTypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Application.StatusType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("BranchId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FirmId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("FirmId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Branch.Branch");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.BranchManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Branch.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CarId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CarName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CarNumberPlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<int>("ShippingId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("ShippingId")
                        .IsUnique();

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Car.Car");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Car.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CompanyId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Company.Company");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.CompanyManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Company.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Firm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("FirmId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirmName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Firm.Firm");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.FirmManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("FirmId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FirmId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Firm.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PhoneNumberId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("PhoneNumberTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumberTypeId")
                        .IsUnique();

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("PhoneNumber.PhoneNumber");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("PhoneNumber.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ShippingId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Shipping.Shipping");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ShippingManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ShippingId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShippingId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Shipping.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Slaughterhouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SlaughterhouseId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<string>("SlaughterhouseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Slaughterhouse.Slaughterhouse");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseJoinAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("JoinAnimalId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnimalId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("KillingComplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("KillingNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("KillingPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SlaughterhouseId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.HasIndex("KillingNumber")
                        .IsUnique();

                    b.HasIndex("SlaughterhouseId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Slaughterhouse.JoinAnimal");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseJoinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("JoinTypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HoldingCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("KillingCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ShreddingCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("SlaughterhouseId")
                        .HasColumnType("integer");

                    b.Property<int>("SlaughterhouseTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SlaughterhouseId");

                    b.HasIndex("SlaughterhouseTypeId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Slaughterhouse.JoinType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SlaughterhouseId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SlaughterhouseId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Slaughterhouse.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Slaughterhouse.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SupplierId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SupplierTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("SupplierTypeId")
                        .IsUnique();

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Supplier.Supplier");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SupplierManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ManagerId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Supplier.Manager");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SupplierType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("Supplier.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BYTEA");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.HasIndex("UserPhoneNumber")
                        .IsUnique();

                    b.ToTable("User.User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.UserJoinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("JoinTypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedByIdId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User.JoinType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TypeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserCreatedByIdId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModifiedByIdId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedByIdId");

                    b.HasIndex("UserModifiedByIdId");

                    b.ToTable("User.Type");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Address", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.AddressType", "AddressType")
                        .WithOne("Address")
                        .HasForeignKey("yedihisse.Entities.Concrete.Address", "AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("AddressCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("AddressModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AddressType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("AddressTypeCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("AddressTypeModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Allotment", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Animal", "Animal")
                        .WithOne("Allotment")
                        .HasForeignKey("yedihisse.Entities.Concrete.Allotment", "AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Shipping", "Shipping")
                        .WithMany("Allotments")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("AllotmentCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("AllotmentModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Shipping");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Animal", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.AnimalType", "AnimalType")
                        .WithMany("Animals")
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("AnimalCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("AnimalModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimalType");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AnimalType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("AnimalTypeCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("AnimalTypeModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Application", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Allotment", "Allotment")
                        .WithMany("Applications")
                        .HasForeignKey("AllotmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.AnimalType", "AnimalType")
                        .WithMany("Applications")
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Branch", "Branch")
                        .WithMany("Applications")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("ApplicationCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("ApplicationModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allotment");

                    b.Navigation("AnimalType");

                    b.Navigation("Branch");

                    b.Navigation("User");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ApplicationStatus", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Application", "Application")
                        .WithMany("ApplicationStatuses")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.ApplicationStatusType", "ApplicationStatusType")
                        .WithMany("ApplicationStatuses")
                        .HasForeignKey("ApplicationStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("ApplicationStatusCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("ApplicationStatusModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ApplicationStatusType");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ApplicationStatusType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("ApplicationStatusTypeCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("ApplicationStatusTypeModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Branch", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("Branch")
                        .HasForeignKey("yedihisse.Entities.Concrete.Branch", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Firm", "Firm")
                        .WithMany("Branches")
                        .HasForeignKey("FirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Branches")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("BranchCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("BranchModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Firm");

                    b.Navigation("PhoneNumber");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.BranchManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Branch", "Branch")
                        .WithMany("BranchManagers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("BranchManagerCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("BranchManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("BranchManagerModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Car", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.CarType", "CarType")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Cars")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Shipping", "Shipping")
                        .WithOne("Car")
                        .HasForeignKey("yedihisse.Entities.Concrete.Car", "ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("CarCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("CarModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");

                    b.Navigation("PhoneNumber");

                    b.Navigation("Shipping");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.CarType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("CarTypeCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("CarTypeModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Company", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("Company")
                        .HasForeignKey("yedihisse.Entities.Concrete.Company", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Companies")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("CompanyCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("CompanyModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("PhoneNumber");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.CompanyManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Company", "Company")
                        .WithMany("CompanyManagers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("CompanyManagerCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("CompanyManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("CompanyManagerModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Firm", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("Firm")
                        .HasForeignKey("yedihisse.Entities.Concrete.Firm", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Company", "Company")
                        .WithMany("Firms")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Firms")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("FirmCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("FirmModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("PhoneNumber");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.FirmManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Firm", "Firm")
                        .WithMany("FirmManagers")
                        .HasForeignKey("FirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("FirmManagerCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("FirmManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("FirmManagerModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firm");

                    b.Navigation("User");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumber", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumberType", "PhoneNumberType")
                        .WithOne("PhoneNumber")
                        .HasForeignKey("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("PhoneNumberCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("PhoneNumberModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneNumberType");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumberType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("PhoneNumberTypeCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("PhoneNumberTypeModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Shipping", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("ShippingCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("ShippingModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ShippingManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Shipping", "Shipping")
                        .WithMany("ShippingManagers")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("ShippingManagerCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("ShippingManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("ShippingManagerModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipping");

                    b.Navigation("User");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Slaughterhouse", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("Slaughterhouse")
                        .HasForeignKey("yedihisse.Entities.Concrete.Slaughterhouse", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Slaughterhouses")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("SlaughterhouseCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("SlaughterhouseModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("PhoneNumber");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseJoinAnimal", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Animal", "Animal")
                        .WithOne("SlaughterhouseJoinAnimal")
                        .HasForeignKey("yedihisse.Entities.Concrete.SlaughterhouseJoinAnimal", "AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.Slaughterhouse", "Slaughterhouse")
                        .WithMany("SlaughterhouseJoinAnimals")
                        .HasForeignKey("SlaughterhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("SlaughterhouseJoinAnimalCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("SlaughterhouseJoinAnimalModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Slaughterhouse");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseJoinType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Slaughterhouse", "Slaughterhouse")
                        .WithMany("SlaughterhouseJoinTypes")
                        .HasForeignKey("SlaughterhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.SlaughterhouseType", "SlaughterhouseType")
                        .WithMany("SlaughterhouseJoinTypes")
                        .HasForeignKey("SlaughterhouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("SlaughterhouseJoinTypeCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("SlaughterhouseJoinTypeModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slaughterhouse");

                    b.Navigation("SlaughterhouseType");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Slaughterhouse", "Slaughterhouse")
                        .WithMany("SlaughterhouseManagers")
                        .HasForeignKey("SlaughterhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("SlaughterhouseManagerCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("SlaughterhouseManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("SlaughterhouseManagerModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slaughterhouse");

                    b.Navigation("User");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("SlaughterhouseTypeCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("SlaughterhouseTypeModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Supplier", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("Supplier")
                        .HasForeignKey("yedihisse.Entities.Concrete.Supplier", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Suppliers")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.SupplierType", "SupplierType")
                        .WithOne("Supplier")
                        .HasForeignKey("yedihisse.Entities.Concrete.Supplier", "SupplierTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("SupplierCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("SupplierModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("PhoneNumber");

                    b.Navigation("SupplierType");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SupplierManager", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Supplier", "Supplier")
                        .WithMany("SupplierManagers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("SupplierManagerCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("SupplierManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("SupplierManagerModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("User");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SupplierType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("SupplierTypeCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("SupplierTypeModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.User", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.Address", "Address")
                        .WithOne("User")
                        .HasForeignKey("yedihisse.Entities.Concrete.User", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.PhoneNumber", "PhoneNumber")
                        .WithMany("Users")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("UserCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("UserModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("PhoneNumber");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.UserJoinType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("UserJoinTypeCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "User")
                        .WithMany("UserJoinTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("UserJoinTypeModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.UserType", "UserType")
                        .WithMany("UserJoinTypes")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.UserType", b =>
                {
                    b.HasOne("yedihisse.Entities.Concrete.User", "UserCreatedById")
                        .WithMany("UserTypeCreatedByIds")
                        .HasForeignKey("UserCreatedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yedihisse.Entities.Concrete.User", "UserModifiedById")
                        .WithMany("UserTypeModifiedByIds")
                        .HasForeignKey("UserModifiedByIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreatedById");

                    b.Navigation("UserModifiedById");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Address", b =>
                {
                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Firm");

                    b.Navigation("Slaughterhouse");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AddressType", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Allotment", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Animal", b =>
                {
                    b.Navigation("Allotment");

                    b.Navigation("SlaughterhouseJoinAnimal");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.AnimalType", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Applications");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Application", b =>
                {
                    b.Navigation("ApplicationStatuses");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.ApplicationStatusType", b =>
                {
                    b.Navigation("ApplicationStatuses");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Branch", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("BranchManagers");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.CarType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Company", b =>
                {
                    b.Navigation("CompanyManagers");

                    b.Navigation("Firms");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Firm", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("FirmManagers");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumber", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Cars");

                    b.Navigation("Companies");

                    b.Navigation("Firms");

                    b.Navigation("Slaughterhouses");

                    b.Navigation("Suppliers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.PhoneNumberType", b =>
                {
                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Shipping", b =>
                {
                    b.Navigation("Allotments");

                    b.Navigation("Car");

                    b.Navigation("ShippingManagers");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Slaughterhouse", b =>
                {
                    b.Navigation("SlaughterhouseJoinAnimals");

                    b.Navigation("SlaughterhouseJoinTypes");

                    b.Navigation("SlaughterhouseManagers");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SlaughterhouseType", b =>
                {
                    b.Navigation("SlaughterhouseJoinTypes");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.Supplier", b =>
                {
                    b.Navigation("SupplierManagers");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.SupplierType", b =>
                {
                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.User", b =>
                {
                    b.Navigation("AddressCreatedByIds");

                    b.Navigation("AddressModifiedByIds");

                    b.Navigation("AddressTypeCreatedByIds");

                    b.Navigation("AddressTypeModifiedByIds");

                    b.Navigation("AllotmentCreatedByIds");

                    b.Navigation("AllotmentModifiedByIds");

                    b.Navigation("AnimalCreatedByIds");

                    b.Navigation("AnimalModifiedByIds");

                    b.Navigation("AnimalTypeCreatedByIds");

                    b.Navigation("AnimalTypeModifiedByIds");

                    b.Navigation("ApplicationCreatedByIds");

                    b.Navigation("ApplicationModifiedByIds");

                    b.Navigation("Applications");

                    b.Navigation("ApplicationStatusCreatedByIds");

                    b.Navigation("ApplicationStatusModifiedByIds");

                    b.Navigation("ApplicationStatusTypeCreatedByIds");

                    b.Navigation("ApplicationStatusTypeModifiedByIds");

                    b.Navigation("BranchCreatedByIds");

                    b.Navigation("BranchManagerCreatedByIds");

                    b.Navigation("BranchManagerModifiedByIds");

                    b.Navigation("BranchManagers");

                    b.Navigation("BranchModifiedByIds");

                    b.Navigation("CarCreatedByIds");

                    b.Navigation("CarModifiedByIds");

                    b.Navigation("CarTypeCreatedByIds");

                    b.Navigation("CarTypeModifiedByIds");

                    b.Navigation("CompanyCreatedByIds");

                    b.Navigation("CompanyManagerCreatedByIds");

                    b.Navigation("CompanyManagerModifiedByIds");

                    b.Navigation("CompanyManagers");

                    b.Navigation("CompanyModifiedByIds");

                    b.Navigation("FirmCreatedByIds");

                    b.Navigation("FirmManagerCreatedByIds");

                    b.Navigation("FirmManagerModifiedByIds");

                    b.Navigation("FirmManagers");

                    b.Navigation("FirmModifiedByIds");

                    b.Navigation("PhoneNumberCreatedByIds");

                    b.Navigation("PhoneNumberModifiedByIds");

                    b.Navigation("PhoneNumberTypeCreatedByIds");

                    b.Navigation("PhoneNumberTypeModifiedByIds");

                    b.Navigation("ShippingCreatedByIds");

                    b.Navigation("ShippingManagerCreatedByIds");

                    b.Navigation("ShippingManagerModifiedByIds");

                    b.Navigation("ShippingManagers");

                    b.Navigation("ShippingModifiedByIds");

                    b.Navigation("SlaughterhouseCreatedByIds");

                    b.Navigation("SlaughterhouseJoinAnimalCreatedByIds");

                    b.Navigation("SlaughterhouseJoinAnimalModifiedByIds");

                    b.Navigation("SlaughterhouseJoinTypeCreatedByIds");

                    b.Navigation("SlaughterhouseJoinTypeModifiedByIds");

                    b.Navigation("SlaughterhouseManagerCreatedByIds");

                    b.Navigation("SlaughterhouseManagerModifiedByIds");

                    b.Navigation("SlaughterhouseManagers");

                    b.Navigation("SlaughterhouseModifiedByIds");

                    b.Navigation("SlaughterhouseTypeCreatedByIds");

                    b.Navigation("SlaughterhouseTypeModifiedByIds");

                    b.Navigation("SupplierCreatedByIds");

                    b.Navigation("SupplierManagerCreatedByIds");

                    b.Navigation("SupplierManagerModifiedByIds");

                    b.Navigation("SupplierManagers");

                    b.Navigation("SupplierModifiedByIds");

                    b.Navigation("SupplierTypeCreatedByIds");

                    b.Navigation("SupplierTypeModifiedByIds");

                    b.Navigation("UserCreatedByIds");

                    b.Navigation("UserJoinTypeCreatedByIds");

                    b.Navigation("UserJoinTypeModifiedByIds");

                    b.Navigation("UserJoinTypes");

                    b.Navigation("UserModifiedByIds");

                    b.Navigation("UserTypeCreatedByIds");

                    b.Navigation("UserTypeModifiedByIds");
                });

            modelBuilder.Entity("yedihisse.Entities.Concrete.UserType", b =>
                {
                    b.Navigation("UserJoinTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
